---
import Layout from "../../../layouts/Layout.astro";
import Aside from "../../../components/Aside.astro";
import Header from "../../../components/Header.astro";
import { getCollection } from "../../../../lexgi.mjs";
import { capitalizeFirstLetter, slugify } from "../../../../utils.js"
import { API_URL } from "../../../consts.mjs";
import FieldFormRow from "../../../components/FieldFormRow.astro";

const identityCookieValue = Astro.cookies.get("identity")?.value;
let identity:any = null;
let token: string | null = null;

try {
  if (identityCookieValue) {
    identity = JSON.parse(identityCookieValue);
    token = identity.token;
  }
} catch (error) {
  console.error("Error al analizar el valor de la cookie:", error);
  // Puedes tomar acciones adicionales aquí, según tus necesidades.
}

const currentLang = 'es';
const title = "Flexi CMS";
const { collection: collectionSlug } = Astro.params;

const collection = getCollection(collectionSlug);
const fields = collection?.fields;

const mainFields: any[] = [];
const sidebarFields: any[] = [];
let relationTypeFieldsDocs:any = {};

await separateFields(fields);

async function separateFields(fields:any) {
  await Promise.all(fields.map(async (field:any) => {
    if (field?.options?.sidebar) {
      sidebarFields.push(field);
    } else {
      mainFields.push(field);
    }

    if (field.type === 'relation' && field.relationTo) {
      await addRelationField(field);
    }
  }));
}

async function addRelationField(field:any){
  const {name, relationTo} = field;
  const relationToSlug = slugify(relationTo);

  let docs:any = await getCollectionDocs(relationToSlug);

  field.docs = docs;
}

if (Astro.request.method === "POST") {
  try {
    let formData = await Astro.request.formData();
    console.log(formData);

    let newFormData = new FormData();

    // Añadir solo los campos que no están vacíos al nuevo objeto FormData
    for (let [key, value] of formData.entries()) {
      if(typeof value === 'object' && value?.size === 0 && value.name === 'undefined') {
        console.log('Es imagen y undefined')
      } else {
        if(value != ''){
          newFormData.append(key, value);
        }
      }
    }

    // Llamar a la función createDoc con el newFormData
    await createDoc(newFormData);
    return Astro.redirect('/admin/' + collectionSlug)

  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

async function createDoc(formData: any) {
  try {
    const res = await fetch(API_URL + collectionSlug, {
      method: "POST",
      body: formData,
      headers: {
        Authorization: "Bearer " + token,
      }
    });

    const data = await res.json();

    return data;

  } catch (error) {
    console.error(error);
  }
}

async function getCollectionDocs(collectionSlug:string){
  try {
    const res = await fetch(API_URL + collectionSlug, 
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + token,
        },
      }
    );

    const data = await res.json();

    return data;

  } catch (error) {
    console.error(error);
  }
}

function fieldLabel(field:any){
  if (typeof field?.label === 'object') {
    const result = field?.label[currentLang]
    return result
  } else if (typeof field?.label === 'string') {
    const result = field?.label;
    return result
  } else {
    if(field.type != 'row') {
      return capitalizeFirstLetter(field?.name.replaceAll("_", " "))
    }
  }
}
---

<Layout title={collectionSlug}>

  <div class="layout aside-opened">
    <button class="toggle-aside-button" data-toggle-nav id="toggle-nav">
      <svg
        class="icon-open-menu"
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="3" y1="12" x2="21" y2="12"></line>
        <line x1="3" y1="6" x2="21" y2="6"></line>
        <line x1="3" y1="18" x2="21" y2="18"></line>
      </svg>
    </button>
    <Aside />
    <div class="layout-content">
      <Header collection={collection} breadcumbAction="Create" />
      <main class="main padding-0">
        <form method="POST" enctype="multipart/form-data" class="create-document flex-auto flex flex-col">
          
          <header
            class="page-header sticky top-0 z-30 py-6 block sm:flex items-center justify-between"
          >
            <div class="flexee-container w-full flex justify-between items-center">
              <div class="flex gap-4">
                <h1
                  class="text-xl font-semibold text-zinc-900 sm:text-2xl dark:text-white"
                >
                  [Untitled]
                </h1>

                <a
                  href=""
                  type="button"
                  class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 sm:w-auto dark:bg-primary-600 dark:hover:bg-primary-700"
                >
                  <svg
                    class="w-5 h-5 mr-2 -ml-1"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                    ><path
                      fill-rule="evenodd"
                      d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                      clip-rule="evenodd"></path></svg
                  >
                   Añadir
                </a>
              </div>

              <div class="flex gap-4">
                <button type="submit" class="text-white bg-violet-700 hover:bg-violet-900 focus:ring-4 focus:ring-violet-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-violet-900 focus:outline-none dark:focus:ring-violet-800">
                  Publicar
                </button>
              </div>
            </div>
          </header>

          <div class={"flexee-container flex-auto document-form" + (sidebarFields.length > 0 ? ' document-form--with-sidebar' : '')}>
            <div class="document-form__main flex flex-col gap-6">
              {
                mainFields.map((field:any) => (
                  <FieldFormRow collection={collection} field={field}></FieldFormRow>
                ))
              }
              
            </div>

            { sidebarFields.length > 0 &&
              <div class="document-form__aside flex flex-col gap-6">
                {
                  sidebarFields.map((field) => (
                    <FieldFormRow collection={collection} field={field}></FieldFormRow>
                  ))
                }
              </div>
            }
          </div>
        </form>
      </main>
    </div>
  </div>
</Layout>

<script>
  const toggleNavBtn = document.querySelector("[data-toggle-nav]");
  const layout = document.querySelector(".layout");
  const aside = document.querySelector(".aside");

  // Add event listeners to fire confetti when a button is clicked.

  toggleNavBtn?.addEventListener("click", () => {
    if (layout?.classList.contains("aside-opened")) {
      layout?.classList.remove("aside-opened");
      aside?.classList.remove("aside-opened");
    } else {
      layout?.classList.add("aside-opened");
      aside?.classList.add("aside-opened");
    }
  });
</script>

<style>
  h1 {
    margin: 0;
  }

  .no-content-section {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 2rem;
    margin: 3rem 0;

    & p {
      font-size: 0.84em;
      color: #a7a7a7;
      margin: 0;
    }

    & button {
      padding: 12px 24px;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      background: #fff;
      color: #000;
      font-weight: 600;
    }
  }

  .document-form {
    display: grid;
    grid-template-columns: 1fr;
  }

  .document-form--with-sidebar {
    display: grid;
    grid-template-columns: 1fr 490px;

    & .document-form__aside {
      padding-left: 4rem;
    }

    & .document-form__main {
      padding-right: 4rem;
    }
  }

  .document-form__aside,
  .document-form__main {
    flex: auto;
    padding: 3rem 0;
  }

  .document-form__aside {
    max-width: 490px;
    border-left: 1px solid rgb(255 255 255 / 5%);
    width: 100%;
  }
  
  .rich-text-editor {
    display: flex;
    flex-direction: column;
    width: 100%;
  }

  .rich-text-editor header button {
    background: #252525;
    padding: 4px;
    font-size: 0.8rem;
    border-radius: 4px;
    width: 30px;
    height: 30px;
  }

  .page-header {
    min-height: 90px;
    background-color: var(--site-bg);
    border-bottom: 1px solid rgb(255 255 255 / 5%);
  }
</style>