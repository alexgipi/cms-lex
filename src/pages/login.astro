---
import { API_URL } from "../consts.mjs";
import FormLayout from "../layouts/FormLayout.astro";
import Layout from "../layouts/Layout.astro"

const redirect = Astro.url.searchParams.get('redirect')! || '/';

interface AlertMessage {
    status: string | null
    message: string | null
}

let alertMessage:AlertMessage = {
    status: null,
    message: null,
};

const errors = { invalidLogin: false };

let email:any = '';
let password:any = '';

const isLoggedIn = Astro.cookies.has('identity');

if (isLoggedIn) return Astro.redirect('/');

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    email = formData.get("email");
    password = formData.get("password");

    const loginUserData = await loginUser(email, password);

    if(loginUserData.ok){        
        const { user, token } = loginUserData;
        alertMessage.status = 'success';
        alertMessage.message = 'Sesión iniciada correctamente';

        const identity = {
            ...user,
            token
        }

        Astro.cookies.set("identity", JSON.stringify(identity))
        
    }else {
      errors.invalidLogin = true;
      alertMessage.status = 'error';
      alertMessage.message = 'Error: Usuario y/o contraseña invalidos';
    }

    const hasErrors = Object.values(errors).some(msg => msg)

    if (!hasErrors) {
      
      return Astro.redirect(redirect);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

async function loginUser(email:string, password:string){
  try {
    const res = await fetch(API_URL + "users/login",
      {
          method: "POST",
          headers: {
              "Content-Type": "application/json",
          },
          body: JSON.stringify({
              email,
              password
          })
      }
    );

    const data = (await res.json()) as any;

    return data;

  } catch(error){
      alertMessage.status = 'error';
      alertMessage.message = 'Ha habído un problema al iniciar sesión.';
  }
    
}

---

<Layout title="Iniciar sesión">
  <main class="flex h-full flex-col justify-center">

    <div class="form-container container flex-dir-column">
      <FormLayout>
        <form method="POST" enctype="multipart/form-data" class="form login-form">
          <img class="h-[30px] mb-7" src="/lexi-cms-logo.png">
          <nav class="secondary-nav mb-2">
            <li> 
              <a href="/registro"> Registro </a>
            </li>
            <li>
              <a href="/login" class="active"> Iniciar sesión </a>
            </li>            
          </nav>

            {alertMessage.message && 
                <p class={"form-alert " + alertMessage.status}>
                    {alertMessage?.message}
                </p>
            }

            <div class="form-element">
                <label class={errors.invalidLogin ? 'invalid' : ''}>
                    <span>Correo electrónico</span>
                    <input value={email} name="email" required type="email" class="focus:ring-[#000] focus:ring-2">
                </label>
                <!-- {errors.email && <p class="field-error">{errors.email}</p>} -->
            </div>
            
            <div class="form-element">
                <label class={errors.invalidLogin ? 'invalid' : ''}>
                    <span>Contraseña</span>
                    <input value={password} name="password" required type="password" class="focus:ring-[#000] focus:ring-2">
                </label>
            </div>

            <a href="/reset-password">¿Olvidaste la contraseña?</a>
        
            <footer>
                <button type="submit">
                    Iniciar sesión
                </button>
                <div class="flex flex-col gap-2 mt-4">
                  <p class="mt-2">¿Todavía no tienes tu cuenta?</p>
                  <a href="/registro"> Crear cuenta de Elmundodelsaquito.es</a>
                </div>
            </footer>
        </form>
      </FormLayout>
    </div>
  </main>
</Layout>